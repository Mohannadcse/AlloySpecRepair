sig Node { adj : set Node } pred undirected { adj = ~adj } pred oriented { no adj & ~adj } pred acyclic { all a:Node | a not in a.^adj } pred complete { all n : Node | n.adj = Node } pred noLoops { no (iden & adj) } pred weaklyConnected { all n:Node | n.*(adj+~adj) in Node } pred stonglyConnected { all n:Node | n.*adj in Node } pred transitive { adj.adj in adj }