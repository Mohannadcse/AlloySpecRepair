sig Node { adj : set Node } pred undirected { adj = ~adj } pred oriented { no (adj & iden) } pred acyclic { all a:Node | a not in a.^adj } pred complete { all n:Node | Node in n.adj } pred noLoops { no (iden & adj) } pred weaklyConnected { all x : Node | Node in x.*adj + ~*adj.x } pred stronglyConnected { all n:Node | Node in n.*(adj + ~adj) } pred transitive { adj.adj in adj }