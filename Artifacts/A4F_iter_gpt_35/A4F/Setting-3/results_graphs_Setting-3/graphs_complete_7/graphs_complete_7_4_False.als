sig Node { adj: set Node } pred undirected { adj = ~adj } pred oriented { all n: Node | some m: Node | n in m.adj or n not in m.adj } pred acyclic { all a: Node | a not in a.^adj } pred complete { all a: Node | a in a.^adj } pred noLoops { no (iden & adj) } pred weaklyConnected { all n: Node | Node in n.*(adj+~adj) } pred stronglyConnected { all n: Node | Node in n.*adj } pred transitive { adj.adj in adj }