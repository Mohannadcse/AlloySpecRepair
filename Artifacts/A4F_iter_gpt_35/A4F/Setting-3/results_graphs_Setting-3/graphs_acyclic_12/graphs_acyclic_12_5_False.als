sig Node { adj: set Node } pred undirected { adj = ~adj } pred oriented { no adj & ~adj } pred acyclic { all x, y, z: Node | x->y in adj and z->y in adj implies y = z and z = x } pred complete { all n: Node | Node in n.adj } pred noLoops { no (iden & adj) } pred weaklyConnected { all n: Node | Node in n.*(adj+~adj) } pred stronglyConnected { all n: Node | Node in n.*(adj+~adj) } pred transitive { adj.adj in adj }