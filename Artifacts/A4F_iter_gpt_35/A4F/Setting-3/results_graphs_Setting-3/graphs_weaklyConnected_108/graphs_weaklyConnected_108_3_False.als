sig Graph { nodes: set Node, edges: set Node -> Node } sig Node { adj : set Node } pred undirected { edges = ~edges } pred oriented { no edges & ~edges } pred acyclic { all a:Node | a not in a.^edges } pred complete { all n:Node | n in n.adj } pred noLoops { no (iden & edges) } sig WeaklyConnected {} pred weaklyConnected { all x : Node | Node in x.^edges - x } pred weaklyConnectedOK { all n:Node | Node in n.*(edges+~edges) } assert weaklyConnectedRepaired { weaklyConnected[] iff weaklyConnectedOK[] } run weaklyConnectedRepaired