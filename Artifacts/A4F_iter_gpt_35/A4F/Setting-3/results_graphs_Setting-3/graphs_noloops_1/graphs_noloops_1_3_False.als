sig Node { adj: set Node } pred undirected { adj = ~adj } pred oriented { no adj & ~adj } pred acyclic { all a: Node | a not in a.^adj } pred complete { all n: Node | Node in n.adj } pred noLoops { adj = Node->Node - iden } pred weaklyConnected { all n: Node | Node in n.*(adj+~adj) } pred stonglyConnected { all n: Node | Node in n.*adj } pred transitive { adj.adj in adj } pred repair_pred_1 { adj = Node->Node - iden } assert repair_assert_1 { repair_pred_1[] }