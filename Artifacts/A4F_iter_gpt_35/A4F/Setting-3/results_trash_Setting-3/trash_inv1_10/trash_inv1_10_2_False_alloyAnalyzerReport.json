{
  "counterexamples": [
    {
      "cntr_cmd": "Check inv1_Repaired expect 0",
      "counterexample": "Yes",
      "counterexample_msg": "Counterexample found which means that Check inv1_Repaired expect 0 assertion is invalid\nthis/Trash={}\nthis/Protected={Protected$0, Protected$1}\nthis/File={Protected$0, Protected$1, File$0}\nthis/File.link={Protected$0->Protected$1, Protected$1->Protected$1, Protected$1->File$0, File$0->Protected$0}\n"
    },
    {
      "cntr_cmd": "Check inv2_Repaired expect 0",
      "counterexample": "no",
      "counterexample_msg": "Counterexample not found which means that Check inv2_Repaired expect 0 is valid"
    },
    {
      "cntr_cmd": "Check inv3_Repaired expect 0",
      "counterexample": "no",
      "counterexample_msg": "Counterexample not found which means that Check inv3_Repaired expect 0 is valid"
    },
    {
      "cntr_cmd": "Check inv4_Repaired expect 0",
      "counterexample": "no",
      "counterexample_msg": "Counterexample not found which means that Check inv4_Repaired expect 0 is valid"
    },
    {
      "cntr_cmd": "Check inv5_Repaired expect 0",
      "counterexample": "no",
      "counterexample_msg": "Counterexample not found which means that Check inv5_Repaired expect 0 is valid"
    },
    {
      "cntr_cmd": "Check inv6_Repaired expect 0",
      "counterexample": "no",
      "counterexample_msg": "Counterexample not found which means that Check inv6_Repaired expect 0 is valid"
    },
    {
      "cntr_cmd": "Check inv7_Repaired expect 0",
      "counterexample": "no",
      "counterexample_msg": "Counterexample not found which means that Check inv7_Repaired expect 0 is valid"
    },
    {
      "cntr_cmd": "Check inv8_Repaired expect 0",
      "counterexample": "no",
      "counterexample_msg": "Counterexample not found which means that Check inv8_Repaired expect 0 is valid"
    },
    {
      "cntr_cmd": "Check inv9_Repaired expect 0",
      "counterexample": "no",
      "counterexample_msg": "Counterexample not found which means that Check inv9_Repaired expect 0 is valid"
    },
    {
      "cntr_cmd": "Check inv10_Repaired expect 0",
      "counterexample": "no",
      "counterexample_msg": "Counterexample not found which means that Check inv10_Repaired expect 0 is valid"
    },
    {
      "cntr_cmd": "Check repair_assert_1",
      "counterexample": "Yes",
      "counterexample_msg": "Counterexample found which means that Check repair_assert_1 assertion is invalid\nthis/Trash={}\nthis/Protected={Protected$0, Protected$1}\nthis/File={Protected$0, Protected$1, File$0}\nthis/File.link={Protected$0->Protected$1, Protected$1->Protected$1, Protected$1->File$0, File$0->Protected$0}\n"
    }
  ],
  "instances": [
    {
      "instance_cmd": "Run repair_pred_1",
      "instances": "Yes",
      "instance_msg": "Instance found which means that the specification is consistent"
    }
  ],
  "error": "Warning Line 7 column 26 in /Users/admin0513-27/Downloads/automated_spec_repair-main-7/the specification:\n& is irrelevant because the two subexpressions are always disjoint.\nLeft type = {this/Protected}\nRight type = {this/Trash} Warning Line 8 column 30 in /Users/admin0513-27/Downloads/automated_spec_repair-main-7/the specification:\nSubset operator is redundant, because the left and right subexpressions are always disjoint.\nLeft type = {this/Trash}\nRight type = {this/Protected} Warning Line 17 column 29 in /Users/admin0513-27/Downloads/automated_spec_repair-main-7/the specification:\n& is irrelevant because the two subexpressions are always disjoint.\nLeft type = {this/Protected}\nRight type = {this/Trash} Warning Line 18 column 33 in /Users/admin0513-27/Downloads/automated_spec_repair-main-7/the specification:\nSubset operator is redundant, because the left and right subexpressions are always disjoint.\nLeft type = {this/Trash}\nRight type = {this/Protected}"
}