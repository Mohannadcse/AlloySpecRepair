sig File { link: set File } sig Trash extends File {} sig Protected extends File {} pred inv1 { no Trash } pred inv2 { File in Trash } pred inv3 { some Trash } pred inv4 { no (Protected & Trash) } pred inv5 { File - Protected in Trash } pred inv6 { ~link . link in iden } pred inv7 { no link.Trash } pred inv8 { no link } pred inv9 { no link.link } pred inv10 { Trash.link in Trash } assert inv1_Repaired { inv1[] iff no Trash } assert inv2_Repaired { inv2[] iff File in Trash } assert inv3_Repaired { inv3[] iff some Trash } assert inv4_Repaired { inv4[] iff no (Protected & Trash) } assert inv5_Repaired { inv5[] iff File - Protected in Trash } assert inv6_Repaired { inv6[] iff ~link . link in iden } assert inv7_Repaired { inv7[] iff no link.Trash } assert inv8_Repaired { inv8[] iff no link } assert inv9_Repaired { inv9[] iff no link.link } assert inv10_Repaired { inv10[] iff Trash.link in Trash } check inv1_Repaired expect 0 check inv2_Repaired expect 0 check inv3_Repaired expect 0 check inv4_Repaired expect 0 check inv5_Repaired expect 0 check inv6_Repaired expect 0 check inv7_Repaired expect 0 check inv8_Repaired expect 0 check inv9_Repaired expect 0 check inv10_Repaired expect 0