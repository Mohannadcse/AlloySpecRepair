sig Node { adj: set Node } pred undirected { all n: Node | n.adj = n.adj } pred oriented { all n: Node | no n & n.adj } pred acyclic { no iden & adj } pred complete { all n, m: Node | n in m.adj } pred noLoops { no iden & adj } pred weaklyConnected { all n, m: Node | n in m.*adj } pred stronglyConnected { all n, m: Node | n in m.^adj } pred transitive { adj.adj in adj } run {} for 5