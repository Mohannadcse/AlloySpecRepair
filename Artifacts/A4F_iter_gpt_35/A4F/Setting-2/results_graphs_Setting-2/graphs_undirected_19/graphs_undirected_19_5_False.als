sig Node { adj: set Node } pred undirected { all n: Node | n.adj = ~n.adj } pred oriented { all n: Node | no n.adj & ~n.adj } pred acyclic { no iden & adj.^adj } pred complete { all n: Node | n.adj = Node } pred noLoops { no (iden & adj) } pred weaklyConnected { all n: Node | n in n.*(adj + ~adj) } pred stronglyConnected { all n: Node | n in n.^adj } pred transitive { adj.adj in adj } run {}