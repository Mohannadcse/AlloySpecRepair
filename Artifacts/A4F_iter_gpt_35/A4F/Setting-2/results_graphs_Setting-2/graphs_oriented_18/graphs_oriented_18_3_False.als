sig Node { adj: set Node } pred undirected { adj = ~adj } pred oriented { no adj & ~adj } pred acyclic { all a: Node | a not in a.^adj } pred complete { all n: Node | n in n.adj } pred noLoops { no (iden & adj) } pred weaklyConnected { all n: Node | n in n.*(adj + ~adj) } pred stronglyConnected { all n: Node | n in n.*adj } pred transitive { adj.adj in adj } assert undirectedRepaired { undirected[] iff adj = ~adj } assert orientedRepaired { oriented[] iff no adj & ~adj } assert acyclicRepaired { acyclic[] iff all a: Node | a not in a.^adj } assert completeRepaired { complete[] iff all n: Node | n in n.adj } assert noLoopsRepaired { noLoops[] iff no (iden & adj) } assert weaklyConnectedRepaired { weaklyConnected[] iff all n: Node | n in n.*(adj + ~adj) } assert stronglyConnectedRepaired { stronglyConnected[] iff all n: Node | n in n.*adj } assert transitiveRepaired { transitive[] iff adj.adj in adj } check undirectedRepaired for 5 check orientedRepaired for 5 check acyclicRepaired for 5 check completeRepaired for 5 check noLoopsRepaired for 5 check weaklyConnectedRepaired for 5 check stronglyConnectedRepaired for 5 check transitiveRepaired for 5