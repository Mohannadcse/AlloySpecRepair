sig List { header: set Node } sig Node { link: set Node, elem: set Int } fact CardinalityConstraints { all l: List | lone l.header } pred Loop(This: List) { no This.header.link || one n: This.header.*link | n.link = n } pred Sorted(This: List) { all n: This.header.*link | one n.link && n.elem < n.link.elem } assert repair_assert_1 { all l: List | Sorted[l] <=> { all n: l.header.*link | some n.link => n.elem <= n.link.elem }} pred repair_pred_1 { all l: List | Sorted[l] <=> { all n: l.header.*link | some n.link => n.elem <= n.link.elem }} pred RepOk(This: List) { Loop[This] Sorted[This] } pred Count(This: List, x: Int, result: Int) { RepOk[This] result = #{n: Node | n in This.header.*link && n.elem = x} } abstract sig Boolean {} one sig True, False extends Boolean {} pred Contains(This: List, x: Int, result: Boolean) { RepOk[This] {some n: This.header.*link | n.elem = x} => result = True else result = False } fact IGNORE { one List List.header.*link = Node }