one sig FSM { start: State, stop: State } sig State { transition: set State } fact OneStartAndStop { #FSM.start = 1 #FSM.stop = 1 } fact ValidStartAndStop { FSM.start != FSM.stop all s:State | FSM.start != s.transition no FSM.stop.transition } fact Reachability { State = FSM.start.*transition all s:(State - FSM.stop) | FSM.stop in s.*transition } assert repair_assert_1{ all s: State | FSM.start !in s.transition } check repair_assert_1 pred repair_pred_1{ all s: State | FSM.start !in s.transition } run repair_pred_1