sig Node { adj : set Node } pred undirected { adj = ~adj } pred oriented { no adj & ~adj } pred acyclic { some a : Node | no a -> a in adj } pred complete { all n:Node | all m:Node | n in m.adj } pred noLoops { no (iden & adj) } pred weaklyConnected { all n:Node | all m:Node | n in m.*(adj+~adj) } pred stonglyConnected { all n:Node | all m:Node | n in m.*adj } pred transitive { adj.adj in adj }