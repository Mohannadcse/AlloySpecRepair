sig Node { adj: set Node } pred undirected { adj = ~adj } pred oriented { no adj & ~adj } pred acyclic { all a: Node | a not in a.^adj } pred complete { all a: Node, b: Node | a in a.^adj implies b in a.adj } pred noLoops { no (iden & adj) } pred weaklyConnected { all n: Node | n in n.*(n.adj + ~n.adj) } pred stronglyConnected { all n: Node | n in n.*n.adj } pred transitive { adj.adj in adj }