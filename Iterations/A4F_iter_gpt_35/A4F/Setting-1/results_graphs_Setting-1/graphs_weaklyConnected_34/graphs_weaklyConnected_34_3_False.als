sig Node { adj: set Node } pred undirected { adj = ~adj } pred oriented { no adj & ~adj } pred acyclic { all a:Node | a not in a.^adj } pred complete { all n:Node | n.adj = Node } pred noLoops { no (iden & adj) } pred weaklyConnected { all n1,n2:Node | n1 in n2.^adj || n2 in n1.^adj } pred stonglyConnected { all n:Node | Node in n.*adj } pred transitive { adj.adj in adj }