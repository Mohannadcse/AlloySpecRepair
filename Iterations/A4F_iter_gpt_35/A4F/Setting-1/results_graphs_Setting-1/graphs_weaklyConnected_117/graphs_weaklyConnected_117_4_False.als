sig Node { adj : set Node } pred undirected { adj = ~adj } pred oriented { no adj & ~adj } pred acyclic { all a:Node | no a in a.^adj } pred complete { all n:Node | all m:Node | (n != m) implies (m in n.adj) } pred noLoops { no (iden & adj) } pred weaklyConnected { all x, y : Node | some z : Node | (z in ^adj.x) and (z in ^adj.y) } pred stonglyConnected { all n:Node | all m:Node | some i: Int | n in m.^i.adj } pred transitive { adj.adj in adj }