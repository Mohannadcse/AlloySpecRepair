sig Node { adj : set Node } pred undirected { adj = ~adj } pred oriented { no adj & ~adj } pred acyclic { all a:Node | a not in a.^adj } pred complete { all n : Node | (Node - n) in n.^adj } pred noLoops { no (iden & adj) } pred weaklyConnected { all n:Node | Node in n.*(adj+~adj) } pred stonglyConnected { all n:Node | Node in n.*adj } pred transitive { adj.adj in adj } pred completeOK { all n:Node | Node in n.adj } assert completeRepaired { complete[] iff completeOK[] } pred repair_pred_1 { all n:Node | (Node - n) in n.^adj } run repair_pred_1 assert repair_assert_1 { complete[] iff completeOK[] } check repair_assert_1