sig Node { adj : set Node } pred undirected { adj = ~adj } pred oriented { no adj & ~adj } pred acyclic { all a:Node | a not in a.^adj } pred completeOK { all n:Node | n.adj = (Node - n) - n } pred noLoops { no (iden & adj) } pred weaklyConnected { all n:Node | Node in n.*(adj+~adj) } pred stonglyConnected { all n:Node | Node in n.*adj } pred transitive { adj.adj in adj } pred noParallelEdges { no n1,n2:Node | n1.adj & n2.adj } assert undirectedRepaired { undirected[] iff undirectedOK[] } assert orientedRepaired { oriented[] iff orientedOK[] } assert acyclicRepaired { acyclic[] iff acyclicOK[] } assert completeRepaired { complete[] iff completeOK[] } assert noLoopsRepaired { noLoops[] iff noLoopsOK[] } assert weaklyConnectedRepaired { weaklyConnected[] iff weaklyConnectedOK[] } assert stonglyConnectedRepaired { stonglyConnected[] iff stonglyConnectedOK[] } assert transitiveRepaired { transitive[] iff transitiveOK[] } assert noParallelEdgesRepaired { noParallelEdges[] } check undirectedRepaired expect 0 check orientedRepaired expect 0 check acyclicRepaired expect 0 check completeRepaired expect 0 check noLoopsRepaired expect 0 check weaklyConnectedRepaired expect 0 check stonglyConnectedRepaired expect 0 check transitiveRepaired expect 0 check noParallelEdgesRepaired expect 0